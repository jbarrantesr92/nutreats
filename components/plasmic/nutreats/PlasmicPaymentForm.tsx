// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: h8C9fz9kVsxnVEjHjpK7So
// Component: c8hSgA53PpEJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: h8C9fz9kVsxnVEjHjpK7So/projectcss
import sty from "./PlasmicPaymentForm.module.css"; // plasmic-import: c8hSgA53PpEJ/css

createPlasmicElementProxy;

export type PlasmicPaymentForm__VariantMembers = {};
export type PlasmicPaymentForm__VariantsArgs = {};
type VariantPropType = keyof PlasmicPaymentForm__VariantsArgs;
export const PlasmicPaymentForm__VariantProps = new Array<VariantPropType>();

export type PlasmicPaymentForm__ArgsType = {};
type ArgPropType = keyof PlasmicPaymentForm__ArgsType;
export const PlasmicPaymentForm__ArgProps = new Array<ArgPropType>();

export type PlasmicPaymentForm__OverridesType = {
  form?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  textArea?: Flex__<typeof AntdTextArea>;
  button?: Flex__<typeof AntdButton>;
  text?: Flex__<"div">;
};

export interface DefaultPaymentFormProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPaymentForm__RenderFunc(props: {
  variants: PlasmicPaymentForm__VariantsArgs;
  args: PlasmicPaymentForm__ArgsType;
  overrides: PlasmicPaymentForm__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (() => {
    const child$Props = {
      className: classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.form
      ),
      extendedOnValuesChange: generateStateOnChangePropForCodeComponents(
        $state,
        "value",
        ["form", "value"],
        FormWrapper_Helpers
      ),
      formItems: undefined,
      labelCol: { span: 8, horizontalOnly: true },
      layout: "vertical",
      mode: undefined,
      onIsSubmittingChange: generateStateOnChangePropForCodeComponents(
        $state,
        "isSubmitting",
        ["form", "isSubmitting"],
        FormWrapper_Helpers
      ),
      ref: ref => {
        $refs["form"] = ref;
      },
      wrapperCol: { span: 16, horizontalOnly: true }
    };
    initializeCodeComponentStates(
      $state,
      [
        {
          name: "value",
          plasmicStateName: "form.value"
        },
        {
          name: "isSubmitting",
          plasmicStateName: "form.isSubmitting"
        }
      ],
      [],
      FormWrapper_Helpers ?? {},
      child$Props
    );

    return (
      <FormWrapper
        data-plasmic-name={"form"}
        data-plasmic-override={overrides.form}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        {...child$Props}
      >
        <FormItemWrapper
          className={classNames("__wab_instance", sty.formField__hpBcY)}
          label={"Name"}
          name={"name"}
        >
          <AntdInput className={classNames("__wab_instance", sty.input)} />
        </FormItemWrapper>
        <FormItemWrapper
          className={classNames("__wab_instance", sty.formField__bku8U)}
          label={"Message"}
          name={"message"}
        >
          <AntdTextArea
            className={classNames("__wab_instance", sty.textArea)}
          />
        </FormItemWrapper>
        <AntdButton
          className={classNames("__wab_instance", sty.button)}
          submitsForm={true}
          type={"primary"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Submit"}
          </div>
        </AntdButton>
      </FormWrapper>
    );
  })() as React.ReactElement | null;
}

const PlasmicDescendants = {
  form: ["form", "input", "textArea", "button", "text"],
  input: ["input"],
  textArea: ["textArea"],
  button: ["button", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  form: typeof FormWrapper;
  input: typeof AntdInput;
  textArea: typeof AntdTextArea;
  button: typeof AntdButton;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPaymentForm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPaymentForm__VariantsArgs;
    args?: PlasmicPaymentForm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPaymentForm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPaymentForm__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPaymentForm__ArgProps,
          internalVariantPropNames: PlasmicPaymentForm__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPaymentForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "form") {
    func.displayName = "PlasmicPaymentForm";
  } else {
    func.displayName = `PlasmicPaymentForm.${nodeName}`;
  }
  return func;
}

export const PlasmicPaymentForm = Object.assign(
  // Top-level PlasmicPaymentForm renders the root element
  makeNodeComponent("form"),
  {
    // Helper components rendering sub-elements
    input: makeNodeComponent("input"),
    textArea: makeNodeComponent("textArea"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicPaymentForm
    internalVariantProps: PlasmicPaymentForm__VariantProps,
    internalArgProps: PlasmicPaymentForm__ArgProps
  }
);

export default PlasmicPaymentForm;
/* prettier-ignore-end */
