// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: h8C9fz9kVsxnVEjHjpK7So
// Component: _uFGsWX7U0LV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Drawer from "../../Drawer"; // plasmic-import: 41RWXTcP0zvI/component
import Card from "../../Card"; // plasmic-import: sEf96cT00Uo9/component

import { useScreenVariants as useScreenVariantszwwmRsht6Acu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: zwwmRsht6Acu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: h8C9fz9kVsxnVEjHjpK7So/projectcss
import sty from "./PlasmicOrderSummaryDrawer.module.css"; // plasmic-import: _uFGsWX7U0LV/css

createPlasmicElementProxy;

export type PlasmicOrderSummaryDrawer__VariantMembers = {};
export type PlasmicOrderSummaryDrawer__VariantsArgs = {};
type VariantPropType = keyof PlasmicOrderSummaryDrawer__VariantsArgs;
export const PlasmicOrderSummaryDrawer__VariantProps =
  new Array<VariantPropType>();

export type PlasmicOrderSummaryDrawer__ArgsType = {};
type ArgPropType = keyof PlasmicOrderSummaryDrawer__ArgsType;
export const PlasmicOrderSummaryDrawer__ArgProps = new Array<ArgPropType>();

export type PlasmicOrderSummaryDrawer__OverridesType = {
  root?: Flex__<"div">;
  drawer?: Flex__<typeof Drawer>;
  h3?: Flex__<"h3">;
  card?: Flex__<typeof Card>;
  h4?: Flex__<"h4">;
};

export interface DefaultOrderSummaryDrawerProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicOrderSummaryDrawer__RenderFunc(props: {
  variants: PlasmicOrderSummaryDrawer__VariantsArgs;
  args: PlasmicOrderSummaryDrawer__ArgsType;
  overrides: PlasmicOrderSummaryDrawer__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "drawer.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszwwmRsht6Acu()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Drawer
        data-plasmic-name={"drawer"}
        data-plasmic-override={overrides.drawer}
        className={classNames("__wab_instance", sty.drawer)}
        onOpenChange={generateStateOnChangeProp($state, ["drawer", "open"])}
        open={generateStateValueProp($state, ["drawer", "open"])}
        slot={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hEqAx)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__uivFe)}>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__zktNg
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h3
                      data-plasmic-name={"h3"}
                      data-plasmic-override={overrides.h3}
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3
                      )}
                    >
                      {"Productos agregados"}
                    </h3>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </h1>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ks9Ew
                )}
              >
                {
                  "Hac\u00e9 click en Continuar para avanzar a los detalles de contacto"
                }
              </div>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return JSON.parse(localStorage.getItem("cart")).reduce(
                      (acc, item) => {
                        const key = `${item.product_name}-${item.product_size}`;
                        const existingGroup = acc.find(
                          group => group.key === key
                        );
                        if (existingGroup) {
                          existingGroup.count += 1;
                        } else {
                          acc.push({
                            ...item,
                            key,
                            count: 1
                          });
                        }
                        return acc;
                      },
                      []
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Card
                    data-plasmic-name={"card"}
                    data-plasmic-override={overrides.card}
                    className={classNames("__wab_instance", sty.card)}
                    key={currentIndex}
                    title={
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              currentItem.product_name +
                              " - " +
                              currentItem.product_size
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Card title";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oN5VW
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return "Cantidad: " + currentItem.count;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "something here";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wMvjH
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "Total: ₡" +
                              currentItem.product_price * currentItem.count
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Card>
                );
              })}
              {(() => {
                try {
                  return JSON.parse(localStorage.getItem("cart")).length == 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1___7Nb1Y
                  )}
                >
                  {"No has agregado ningun producto"}
                </h1>
              ) : null}
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__z31M4)}
                displayHeight={"1px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"300px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/nutreats/images/horizontalLineSvgrepoComSvg.svg",
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__ezjQ7)}>
              <div className={classNames(projectcss.all, sty.freeBox__nVkV)}>
                <h4
                  data-plasmic-name={"h4"}
                  data-plasmic-override={overrides.h4}
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          const shipping_cost = JSON.parse(
                            localStorage.getItem("shipping_cost")
                          );
                          const shipping_total =
                            shipping_cost === undefined ||
                            shipping_cost === null
                              ? "Pendiente"
                              : shipping_cost;
                          return "Costo de envío: " + shipping_total;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h4>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eFzBg
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          "Total: \u20A1 " +
                          JSON.parse(localStorage.getItem("cart")).reduce(
                            (sum, product) => sum + product.product_price,
                            0
                          )
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
          </Stack__>
        }
        trigger={
          <React.Fragment>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__qtd)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"50px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/nutreats/images/application13873107Svg.svg",
                fullWidth: 150,
                fullHeight: 150,
                aspectRatio: 1
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___0Nv4
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return JSON.parse(localStorage.getItem("cart")).length;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </React.Fragment>
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "drawer", "h3", "card", "h4"],
  drawer: ["drawer", "h3", "card", "h4"],
  h3: ["h3"],
  card: ["card"],
  h4: ["h4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  drawer: typeof Drawer;
  h3: "h3";
  card: typeof Card;
  h4: "h4";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOrderSummaryDrawer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOrderSummaryDrawer__VariantsArgs;
    args?: PlasmicOrderSummaryDrawer__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOrderSummaryDrawer__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicOrderSummaryDrawer__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOrderSummaryDrawer__ArgProps,
          internalVariantPropNames: PlasmicOrderSummaryDrawer__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOrderSummaryDrawer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOrderSummaryDrawer";
  } else {
    func.displayName = `PlasmicOrderSummaryDrawer.${nodeName}`;
  }
  return func;
}

export const PlasmicOrderSummaryDrawer = Object.assign(
  // Top-level PlasmicOrderSummaryDrawer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    drawer: makeNodeComponent("drawer"),
    h3: makeNodeComponent("h3"),
    card: makeNodeComponent("card"),
    h4: makeNodeComponent("h4"),

    // Metadata about props expected for PlasmicOrderSummaryDrawer
    internalVariantProps: PlasmicOrderSummaryDrawer__VariantProps,
    internalArgProps: PlasmicOrderSummaryDrawer__ArgProps
  }
);

export default PlasmicOrderSummaryDrawer;
/* prettier-ignore-end */
