// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: h8C9fz9kVsxnVEjHjpK7So
// Component: Hi6CyZuiUjlz

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: h8C9fz9kVsxnVEjHjpK7So/projectcss
import sty from "./PlasmicAnimatedMenu.module.css"; // plasmic-import: Hi6CyZuiUjlz/css

createPlasmicElementProxy;

export type PlasmicAnimatedMenu__VariantMembers = {};
export type PlasmicAnimatedMenu__VariantsArgs = {};
type VariantPropType = keyof PlasmicAnimatedMenu__VariantsArgs;
export const PlasmicAnimatedMenu__VariantProps = new Array<VariantPropType>();

export type PlasmicAnimatedMenu__ArgsType = {};
type ArgPropType = keyof PlasmicAnimatedMenu__ArgsType;
export const PlasmicAnimatedMenu__ArgProps = new Array<ArgPropType>();

export type PlasmicAnimatedMenu__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultAnimatedMenuProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAnimatedMenu__RenderFunc(props: {
  variants: PlasmicAnimatedMenu__VariantsArgs;
  args: PlasmicAnimatedMenu__ArgsType;
  overrides: PlasmicAnimatedMenu__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Embed
        data-plasmic-name={"embedHtml"}
        data-plasmic-override={overrides.embedHtml}
        className={classNames("__wab_instance", sty.embedHtml)}
        code={
          '<input type="checkbox" role="button" aria-label="Display the menu" class="menu">\n<style>.menu {\n  --s: 40px; /* control the size */\n  --c: black; /* the color */\n  \n  height: var(--s);\n  aspect-ratio: 1;\n  border: none;\n  padding: 0;\n  border-inline: calc(var(--s)/2) solid #0000; \n  box-sizing: content-box;\n  --_g1: linear-gradient(var(--c) 20%,#0000 0 80%,var(--c) 0) \n         no-repeat content-box border-box;\n  --_g2: radial-gradient(circle closest-side at 50% 12.5%,var(--c) 95%,#0000) \n         repeat-y content-box border-box;\n  background: \n    var(--_g2) left  var(--_p,0px) top,\n    var(--_g1) left  calc(var(--s)/10 + var(--_p,0px)) top,\n    var(--_g2) right var(--_p,0px) top,\n    var(--_g1) right calc(var(--s)/10 + var(--_p,0px)) top;\n  background-size: \n    20% 80%,\n    40% 100%;\n  position: relative;\n  clip-path: inset(0 25%);\n  -webkit-mask: linear-gradient(90deg,#0000,#000 25% 75%,#0000);\n  cursor: pointer;\n  transition: \n    background-position .3s var(--_s,.3s), \n    clip-path 0s var(--_s,.6s);\n  -webkit-appearance:none;\n  -moz-appearance:none;\n  appearance:none;\n}\n.menu:before,\n.menu:after {\n  content:"";\n  position: absolute;\n  border-radius: var(--s);\n  inset: 40% 0;\n  background: var(--c);\n  transition: transform .3s calc(.3s - var(--_s,.3s));\n}\n\n.menu:checked {\n  clip-path: inset(0);\n  --_p: calc(-1*var(--s));\n  --_s: 0s;\n}\n.menu:checked:before {\n  transform: rotate(45deg);\n}\n.menu:checked:after {\n  transform: rotate(-45deg);\n}\n.menu:focus-visible {\n  clip-path: none;\n  -webkit-mask: none;\n  border: none;\n  outline: 2px solid var(--c);\n  outline-offset: 5px;\n}\n\nbody {\n  margin:0;\n  min-height:100vh;\n  display:grid;\n  place-content:center;\n}\n</style>'
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "embedHtml"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAnimatedMenu__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAnimatedMenu__VariantsArgs;
    args?: PlasmicAnimatedMenu__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAnimatedMenu__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAnimatedMenu__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAnimatedMenu__ArgProps,
          internalVariantPropNames: PlasmicAnimatedMenu__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAnimatedMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAnimatedMenu";
  } else {
    func.displayName = `PlasmicAnimatedMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicAnimatedMenu = Object.assign(
  // Top-level PlasmicAnimatedMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicAnimatedMenu
    internalVariantProps: PlasmicAnimatedMenu__VariantProps,
    internalArgProps: PlasmicAnimatedMenu__ArgProps
  }
);

export default PlasmicAnimatedMenu;
/* prettier-ignore-end */
